---
title: "SCIE-PANC"
params: 
  root: "~/Documents/SCIE-PANC/Data/hg38/"
format: html
editor: visual
---

Bulk RNA analysis in the SCIE-PANC project investigating the tumor microenvironment in pancreatic adenocarcinoma

## Data and libraries initialization

```{r}
#| message: false
library(reshape2)
library(ggplot2)
library(DESeq2)
library(tidyverse)
library(biomaRt)
library(ggfortify)
library(pheatmap)
library(multideconv)
library(dplyr)
library(stringr)
library(minet)
library(Rgraphviz)
```

Download the data

```{r}
file_list <- list.files(path = params$root, 
                        pattern = "_htseq_count_all.txt$", 
                        full.names = TRUE, 
                        recursive = TRUE)

length(file_list)
```

Name the column by patient numero and genes column

```{r}
get_prefix <- function(file_path){
  fname <- basename(file_path)
  prefix <- sub("^([^_]+_[^_]+).*", "\\1", fname)
  return(prefix)
}

expr_list <- lapply(file_list, function(f){
  df <- read.table(f, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
  colnames(df)[1] <- "Genes"
  prefix <- get_prefix(f)
  colnames(df)[2] <- prefix
  return(df)
})
```

Merge all the patients

```{r}
expr_matrix <- Reduce(function(x, y) merge(x, y, by = "Genes", all = TRUE), expr_list)
```

```{r}
expr_matrix <- expr_matrix[!expr_matrix$Genes %in% c("__alignment_not_unique",
                                                     "__ambiguous",
                                                     "__no_feature",
                                                     "__not_aligned",
                                                     "__too_low_aQual"), ]
dim(expr_matrix)
head(expr_matrix)
```

Add genes annotation and names

```{r}
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")

mapping <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
                 filters = "ensembl_gene_id",
                 values = expr_matrix$Genes,
                 mart = ensembl)

head(mapping)
matrix_annot<-merge(mapping, expr_matrix, by.y="Genes", by.x="ensembl_gene_id")
expr_matrix <- matrix_annot[, -1]
#rownames(expr_matrix) <- expr_matrix$hgnc_symbol
head(expr_matrix)
dim(expr_matrix)
```

```{r}
expr_matrix <- expr_matrix %>%
     filter(hgnc_symbol != "") # filter "" no genes names 
dim(expr_matrix)
```

Genes doublets, keep the genes with the more count

```{r}
expr_matrix <- expr_matrix %>%
  dplyr::rowwise() %>%
  dplyr::mutate(total_counts = sum(dplyr::c_across(-hgnc_symbol))) %>% # calculate the sum of count 
  dplyr::ungroup() %>%
  dplyr::arrange(hgnc_symbol, desc(total_counts)) %>% # order the doublets
  dplyr::distinct(hgnc_symbol, .keep_all = TRUE) %>%
  dplyr::select(-total_counts)
dim(expr_matrix)
```

Preprocessing: genes filtering

1- Filtering based on genes where the total number of reads across all samples

```{r}
expr_matrix<-as.data.frame(expr_matrix)
rownames(expr_matrix) <- expr_matrix$hgnc_symbol
expr_matrix <- expr_matrix[, -1] #Genes Id in rownames
expr_matrix_mat <- as.matrix(expr_matrix)

keep <- rowSums(expr_matrix_mat) > 5  # keep all genes where the total number of reads across all samples is greater than 5
table(keep, useNA="always") 
expr_filtered <- expr_matrix_mat[keep, ]

dim(expr_filtered) 
```

```{r}
saveRDS(expr_filtered, file = "expr_filtered.rds")
```

## Descriptive statistics

```{r}
total_counts <- colSums(expr_filtered)
summary(total_counts)

hist(total_counts, breaks = 50, main = "Total counts per sample",
     xlab = "Total counts", col = "steelblue")
boxplot(total_counts, main = "Total counts per sample")
```

Normalization and scaling

```{r}
vst_matrix <- vst(expr_filtered)
```

```{r}
saveRDS(vst_matrix, file = "vst_matrix.rds")
```

Heatmap

```{r}
#top variable genes
topN <- 300
sel <- head(order(apply(vst_matrix,1,sd), decreasing = TRUE), topN)
mat_top <- vst_matrix[sel, ]
pheatmap(mat_top, scale = "row", show_rownames = FALSE, show_colnames = FALSE,
         clustering_method = "complete", main="Heatmap of PDAC patients on top 300 genes")
```

PCA

```{r}
pca_result <- prcomp(t(vst_matrix), center = TRUE, scale. = FALSE)  
pca_data <- as.data.frame(pca_result$x)
pca_data$PatientID <- colnames(vst_matrix)
```

```{r}
var_explained <- (pca_result$sdev)^2 / sum(pca_result$sdev^2)*100

barplot(var_explained[1:50], main = "Explained Variance (%)",
        xlab = "Principal Component", ylab = "Explained Variance (%)",names.arg = 1:50,
        col = "skyblue")
```

```{r}
PC1=var_explained[1]
PC2=var_explained[2]
PC1
PC2

ggplot(pca_data, aes(x = PC1, y = PC2)) +
    geom_point(size = 3) +
    labs(title = "PCA of SCIE-PANC Bulk RNA-seq Data",
         x = "Principal Component 1 (8.33%)",
         y = "Principal Component 2 (4.46%)") +
    theme_minimal() +
    theme(legend.position = "top")
```

Hierarchical clustering

```{r}
vst_matrix.scale=scale(vst_matrix)
vst_matrix.scale<-t(vst_matrix.scale)
vst_matrix.dist=dist(vst_matrix.scale)
res.hclust<-hclust(vst_matrix.dist)

png("dendrogram.png", width=2000, height=1500, res=300)
plot(res.hclust, main = "Cluster Dendrogram")
```

## Deconvolution

```{r}
#| message: false
#| warning: false
deconv = compute.deconvolution(raw.counts = expr_filtered, 
                               methods = c("Quantiseq", "Epidish", 
                                           "DeconRNASeq", "DWLS","MOMF"), 
                               normalized = TRUE, 
                               return = TRUE, 
                               file_name = "Deconv_scie-panc")
```

```{r}
processed_deconvolution = compute.deconvolution.analysis(deconv, corr = 0.7, seed = 123, return = T, file_name="deconv_subsgroups")
```

```{r}
results1<-read.table("Results/Cell_subgroups_deconv_subsgroups.csv", sep = ",", header=T)
results<-read.table("Results/Deconvolution_after_subgrouping_deconv_subsgroups.csv", sep = ",", header=T)
rownames(results) <- results$X
results <- results[,-1]
results3<-read.table("Results/Deconvolution_Deconv_scie-panc.csv", sep = ",", header=T)
```

## Gene regulatory network inference

```{r}
write.table(vst_matrix, file = "matrix_vst.txt", sep = "\t", quote = FALSE, row.names = TRUE, col.names = NA)
```

ARACNe (in Unix)

```{r}
# Calculate mutual information matrix and apply ARACNE algorithm
network <- minet(t(vst_matrix), method="aracne")
```

```{bash}
wget https://humantfs.ccbr.utoronto.ca/download/v_1.01/TF_names_v_1.01.txt
for i in {1..100}
do
java -Xmx5G -jar /home/ablanc/work/scie-panc/ARACNe-AP/dist/aracne.jar -e matrix_vst.txt -o outputFolder --tfs TF_names_v_1.01.txt --pvalue 1E-8 --seed $i
done

java -Xmx5G -jar Aracne.jar -o outputFolder --consolidate
```

Vizualise the network

```{plot(as(network, "graphNEL"))}
```

Viper

```{r}
# Conversion the network in regulon
regulon <- aracne2regulon(network, vst_matrix)

# VIPER
viper_activity <- viper(vst_matrix, regulon, verbose = FALSE)
```

```{r}
pca <- prcomp(t(viper_activity), scale.=TRUE)
pca_df <- data.frame(pca$x, Condition = your_conditions_vector)
ggplot(pca_df, aes(x=PC1, y=PC2, color=Condition)) +
  geom_point(size=3) +
  theme_minimal()
```

```{r}
var_genes <- head(order(apply(viper_activity, 1, var), decreasing=TRUE), 50)
pheatmap(viper_activity[var_genes, ], scale="row",
         show_rownames=TRUE, show_colnames=TRUE,
         clustering_distance_rows="euclidean",
         clustering_distance_cols="euclidean")
```
